version: "3.9"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka1:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    hostname: kafka1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      volumes:
         ./volumes/server1/:/bitnami/kafka

  kafka2:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29094:29092
    hostname: kafka2
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      volumes:
        ./volumes/server2/:/bitnami/kafka

  kafka3:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29096:29092
    hostname: kafka3
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:29096
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      volumes:
         ./volumes/server3/:/bitnami/kafka

  db:
    image: 'postgres:13.1-alpine'
    container_name: db
    environment:
      - POSTGRES_PASSWORD=ROOT
      - POSTGRES_USER=POSTGRES
      - POSTGRES_DB=metric_db
    ports:
      - '5432:5432'

  consumerapp:
    build:
      context: ./MetricConsumerMicroservice
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    container_name: consumerapp
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/metric_db
      - SPRING_DATASOURCE_USERNAME=POSTGRES
      - SPRING_DATASOURCE_PASSWORD=ROOT

  producerapp:
    build:
      context: ./MetricProducerMicroservice
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    container_name: producerapp


